// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DEV_DOCKER_DATABASE")
  shadowDatabaseUrl = env("DEV_DOCKER_SHADOW_DATABASE")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  name      String
  role      Role       @default(USER)
  wishlist  Wishlist[]
  cartItems CartItem[]
  orders    Order[]
  

  @@index([email])
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String
  wishlist    Wishlist[]
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@index([name])
  @@index([price])
  @@index([stock])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  @@unique([userId, productId]) 
  @@index([userId])
  @@index([productId])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}


model Order {
  id        String      @id @default(cuid())
  userId    String
  total     Float
  status    String
  createdAt DateTime    @default(now())
  items     OrderItem[]
  user      User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}